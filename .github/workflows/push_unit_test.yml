# name: CI/CD Pipeline for Flask App

# on:
#   push:
#     branches: [main]

# jobs:
#   build:
#     name: Build and Push Images
#     runs-on: ubuntu-latest

#     steps:
#       - name: Check out code
#         uses: actions/checkout@v2

#       - name: Set up Python
#         uses: actions/setup-python@v2
#         with:
#           python-version: 3.x

#       - name: Install dependencies
#         run: |
#           python -m pip install --upgrade pip
#           pip install -r application/requirements.txt
#           pip install requests

#       - name: Mock unit tests
#         run: |
#           echo "Mocking unit tests... Tests successful!"

#       - name: Login to Amazon ECR
#         id: login-ecr
#         uses: aws-actions/amazon-ecr-login@v1
#         env:
#           AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
#           AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#           AWS_SESSION_TOKEN: ${{ secrets.AWS_SESSION_TOKEN }}
#           AWS_REGION: us-east-1

#       - name: Build and Push Application Image
#         env:
#           ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
#           ECR_REPOSITORY: flask-app-repo
#           IMAGE_TAG: ${{ github.sha }}
#         run: |
#           cd application/
#           docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -f Dockerfile .
#           docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

#       - name: Build and Push MySQL DB Image
#         env:
#           ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
#           ECR_REPOSITORY: mysql-db-repo
#           IMAGE_TAG: ${{ github.sha }}
#         run: |
#           cd application/
#           docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -f Dockerfile_mysql .
#           docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG


name: "App Build CICD Pipeline"

on:
  push:
    branches:
      - main

permissions:
  contents: read
  pull-requests: write

env:
  REPOSITORY_NAME: docker-containers
  DATABASE_IMAGE_NAME: mysql-app
  APPLICATION_IMAGE_NAME: flask-app
  AWS_REGION: us-east-1

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Verify directory structure
        run: ls -R

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          
        - name: Mock unit tests
         run: |
           echo "Mocking unit tests... Tests successful!"

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push MySQL image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: "latest"
        run: |
          # Build the MySQL Docker image
          docker build -t $ECR_REGISTRY/${REPOSITORY_NAME}:${DATABASE_IMAGE_NAME}-${IMAGE_TAG} \
            -f ./application/Dockerfile_mysql ./application
          docker push $ECR_REGISTRY/${REPOSITORY_NAME}:${DATABASE_IMAGE_NAME}-${IMAGE_TAG}

      - name: Build, tag, and push Flask app image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: "latest"
        run: |
          # Build the Flask app Docker image
          docker build -t $ECR_REGISTRY/${REPOSITORY_NAME}:${APPLICATION_IMAGE_NAME}-${IMAGE_TAG} \
            ./application
          docker push $ECR_REGISTRY/${REPOSITORY_NAME}:${APPLICATION_IMAGE_NAME}-${IMAGE_TAG}